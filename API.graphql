# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AuthResponse {
  token: String!
  currentUser: CurrentUser!
}

type CodeSession {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  containerId: String!
  networkId: String!
}

type Configuration {
  id: ID!
}

input CreateUtilityInput {
  name: String!
}

type CurrentUser {
  id: ID!
  username: String!
  email: String!
  roles: [UserRole!]!
  projects: [Project!]!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input LoginInput {
  username: String!
  password: String!
}

type Mutation {
  login(input: LoginInput!): AuthResponse!
  register(input: UserInput!): RegisterResponse!
  resetPasswordReset(input: RequestPasswordResetInput!): Boolean!
  startCodingSession(projectId: String!): Project!
  finishCodingSession(projectId: String!): Project!
  initialConfiguration(user: UserInput!): Configuration!
  createProject(input: ProjectInput!): CurrentUser!
  updateProject(input: UpdateProjectInput!, projectId: String!): Project!
  createUtility(input: CreateUtilityInput!): Utility!
}

type Project {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  projectAuth: ProjectAuth
  gitUrl: String!
  codeSession: CodeSession
}

type ProjectAuth {
  id: String!
  username: String!
  password: String!
}

input ProjectAuthInput {
  username: String!
  password: String!
}

input ProjectInput {
  name: String!
  gitUrl: String!
  auth: ProjectAuthInput
}

type Query {
  currentUser: CurrentUser
  hasSetup: Boolean!
  project(projectId: String!): Project!
  users: [User!]!
  user(userId: String!): User!
  utilities: [Utility!]!
  helloWorld: String!
}

type RegisterResponse {
  success: Boolean!
  token: String!
  currentUser: CurrentUser!
}

input RequestPasswordResetInput {
  email: String!
}

input ResetPasswordInput {
  token: String!
  password: String!
}

input UpdateProjectAuthInput {
  username: String
  password: String
}

input UpdateProjectInput {
  name: String
  auth: UpdateProjectAuthInput
}

type User {
  id: ID!
  username: String!
}

input UserInput {
  username: String!
  email: String!
  password: String!
}

enum UserRole {
  GUEST
  USER
  ADMIN
}

type Utility {
  id: ID!
  name: String!
}
